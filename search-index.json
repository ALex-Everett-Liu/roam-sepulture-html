[
  {
    "title": "My Personal Wiki",
    "content": "My Personal Wiki Welcome! Below you’ll find main topics, just like a contents/VTE section on Wikipedia. STEM Physics Mathematics Chemistry Biology Computer Science 🖥️ Programming Mechanical Engineering Humanities Social Science Arts Culture",
    "url": "index.html",
    "lastModified": "2025-07-22T20:27:27.158Z"
  },
  {
    "title": "Physics - My Personal Wiki",
    "content": "← Back to Homepage Physics",
    "url": "physics.html",
    "lastModified": "2025-07-22T19:14:26.444Z"
  },
  {
    "title": "Claude Code 精准上下文对比 - 编程指南",
    "content": "Claude Code 精准上下文对比 深入理解 Claude Code 的上下文处理机制 Claude Code 上下文处理 AI 编程 创建日期: 2025-07-23 最后更新: 2025-07-23 首页 编程 Claude Code 精准上下文对比 目录 1. 概述 上下文机制 2. 精准对比 核心优势 局限性 3. 实际应用 示例对比 4. 最佳实践 1. Claude Code 上下文处理概述 Claude Code 在处理代码上下文时采用了独特的精准匹配机制，与传统的模糊匹配相比，能够更准确地理解代码意图和上下文关系。 💡 关键洞察： Claude Code 的上下文处理不仅仅是文本匹配，而是基于代码语义和结构的深层理解。 上下文机制详解 Claude Code 使用以下机制实现精准上下文处理： 语义分析： 基于 AST (抽象语法树) 的代码结构分析 作用域感知： 理解变量、函数、类的作用域关系 依赖追踪： 识别代码片段之间的依赖关系 类型推断： 通过上下文推断变量和表达式的类型 2. 精准对比：传统 vs Claude Code 对比维度 传统方法 Claude Code 匹配精度 基于关键词的模糊匹配容易产生误匹配 基于语义的精准匹配理解代码意图 上下文理解 局部文本片段缺乏全局视角 完整的代码结构跨文件关联 类型感知 无类型信息容易推断错误 完整的类型系统精确的类型推断 作用域处理 忽略作用域边界命名冲突风险 精确的作用域分析避免命名冲突 依赖关系 简单的文本依赖忽略语义依赖 完整的依赖图语义级别的依赖 核心优势 🎯 精准定位 能够精确定位到具体的代码片段，而不是模糊的文本匹配 🔍 深度理解 理解代码的语义含义，而非表面的文本形式 🔗 跨文件关联 能够追踪跨文件的依赖关系和引用 局限性分析 ⚠️ 需要注意的限制： 对于高度动态的语言特性可能理解有限 复杂宏定义或模板元编程的解析可能有挑战 运行时行为的预测需要结合静态分析 3. 实际应用场景 示例对比：函数调用上下文 让我们通过一个具体的例子来对比传统方法和 Claude Code 的差异： 代码示例： // utils.js export function calculateTotal(items) { return items.reduce((sum, item) => sum +",
    "url": "programming/01/Claude-Code-精准上下文对比.html",
    "lastModified": "2025-07-23T09:22:16.095Z"
  },
  {
    "title": "设置 Git Bash 环境变量 - 编程指南",
    "content": "Skip to main content 设置 Git Bash 环境变量 Claude Code 配置指南 Claude Code Git Bash 环境变量 创建日期: 2025-07-23 最后更新: 2025-07-23 首页 编程 设置 Git Bash 环境变量 目录 问题描述 启动 Claude Code 时遇到以下错误提示： Launching Claude Code... Claude Code on Windows requires git-bash (https://git-scm.com/downloads/win). If installed but not in PATH, set environment variable pointing to your bash.exe, similar to: CLAUDE_CODE_GIT_BASH_PATH=C:\\Program Files\\Git\\bin\\bash.exe Git Bash 路径确认 首先确认你的 Git Bash 安装位置： Git Bash bash.exe Git Command Line E:\\ scoop\\ apps\\ git\\ 2.50.0\\ bin\\ bash.exe 目标路径： E:\\scoop\\apps\\git\\2.50.0\\bin\\bash.exe 解决方案 设置环境变量 CLAUDE_CODE_GIT_BASH_PATH 指向你的 Git Bash 路径。 变量名： CLAUDE_CODE_GIT_BASH_PATH 变量值： E:\\scoop\\apps\\git\\2.50.0\\bin\\bash.exe 方法 1：通过 PowerShell 设置（推荐） PS C:\\Users\\User> SetEnvironmentVariable(...) ✓ Success PowerShell Terminal 1 PowerShell 管理员运行 以管理员身份打开 PowerShell 按 Win + X → 选择 \"Windows PowerShell（管理员）\" 执行设置命令 [Environment]::SetEnvironmentVariable(\"CLAUDE_CODE_GIT_BASH_PATH\", \"E:\\scoop\\apps\\git\\2.50.0\\",
    "url": "programming/01/设置-Git-Bash-环境变量.html",
    "lastModified": "2025-07-23T09:23:18.020Z"
  },
  {
    "title": "编程文档 - Personal Wiki",
    "content": "编程文档 编程技术指南与最佳实践 首页 编程 文章列表 设置 Git Bash 环境变量 详细指南如何在 Windows 系统中为 Claude Code 配置 Git Bash 环境变量，解决启动错误问题。 2025-07-23 配置 5分钟阅读 Claude Code 精准上下文对比 深入分析 Claude Code 的上下文处理机制，对比传统方法的优势和实际应用。 2025-07-23 AI编程 8分钟阅读 目录结构 📁 programming/ 📁 01/ 📄 设置-Git-Bash-环境变量.html 📄 Claude-Code-精准上下文对比.html",
    "url": "programming.html",
    "lastModified": "2025-07-23T09:24:54.152Z"
  },
  {
    "title": "Template - Modern Documentation",
    "content": "Skip to main content Document Title Content description or subtitle Home Home / Category Name / Current Document Contents Section Title 1 Subsection Main Content Title Brief description of the content or problem being addressed Section Title Visual representation of concept Subsection Title Original content from source document goes here. Preserve the original meaning while enhancing presentation. code.example Copy // Example code block const example = \"This is how you preserve original content\"; console.log(example); Note: Important information or tip related to the content. Step-by-Step Guide 1 Step Title Detailed step description with clear instructions. 2 Next Step Continue with the next logical step in the process. © 2025 Personal Wiki. Content preserved from original source. Edit History",
    "url": "template.html",
    "lastModified": "2025-07-23T08:04:01.706Z"
  }
]